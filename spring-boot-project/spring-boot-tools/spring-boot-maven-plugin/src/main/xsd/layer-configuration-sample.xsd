<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema elementFormDefault="qualified"
			xmlns="http://www.springframework.org/schema/layers"
			xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			targetNamespace="http://www.springframework.org/schema/layers">
	<xsd:element name="layers-configuration" type="layersConfigurationType"/>
	<xsd:complexType name="layersConfigurationType">
		<xsd:sequence>
			<xsd:element type="layersType" name="layers"/>
			<xsd:element type="librariesType" name="libraries" minOccurs="0"/>
			<xsd:element type="classesType" name="classes" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="layersType">
		<xsd:sequence>
			<xsd:element type="xsd:string" name="layer" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	The name of a layer. Each layer in the configuration must be referenced once and the
	order matches how the content is likely to change. Put layers that are frequently
	updated first, layers that are more stable (such as non-snapshot dependencies) last.
				]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="librariesType">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
	Strategies that should be applied to libraries. If no strategies are defined, two
	layers are created out-of-the-box. A "snapshot-dependencies" layer with SNAPSHOT
	libraries and a "dependencies" layer with all the other libraries.
				]]></xsd:documentation>
		</xsd:annotation>
		<xsd:choice maxOccurs="unbounded">
			<xsd:element type="defaultLibrariesStrategyType" name="default-strategy">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	Out-of-the-box strategy to apply on libraries.
				]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element type="librariesStrategyType" name="strategy">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	Strategy to apply on libraries.
				]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="librariesStrategyType" mixed="true">
		<xsd:sequence>
			<xsd:element type="filterType" name="coordinates" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute type="xsd:string" name="id" use="required"/>
		<xsd:attribute type="xsd:string" name="layer" use="required"/>
	</xsd:complexType>
	<xsd:complexType name="classesType">
		<xsd:annotation>
			<xsd:documentation><![CDATA[
	Strategies that should be applied to classes. If no strategies are defined, a single
	"application" layer is created out-of-the-box.
				]]></xsd:documentation>
		</xsd:annotation>
		<xsd:choice maxOccurs="unbounded">
			<xsd:element type="defaultClassesStrategyType" name="default-strategy">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	Out-of-the-box strategy to apply on classes.
				]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element type="classesStrategyType" name="strategy" maxOccurs="unbounded"
						 minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	Strategy to apply on classes.
				]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="classesStrategyType" mixed="true">
		<xsd:sequence>
			<xsd:element type="filterType" name="locations" minOccurs="0"/>
			<xsd:element type="filterType" name="names" minOccurs="0"/>
		</xsd:sequence>
		<xsd:attribute type="xsd:string" name="id" use="required"/>
		<xsd:attribute type="xsd:string" name="layer" use="required"/>
	</xsd:complexType>

	<xsd:complexType name="filterType">
		<xsd:sequence>
			<xsd:element type="xsd:string" name="include" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	Pattern of the elements to include.
			]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element type="xsd:string" name="exclude" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
	Pattern of the elements to exclude. An exclude pattern takes precedence over an
	include pattern.
			]]></xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="defaultLibrariesStrategyType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="id" use="required">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	The identifier of an out-of-the-box strategy for libraries. The name of the layer
	matches the id of the strategy but can be overridden if necessary.

	There are 2 out-of-the-box libraries strategies:

	1. "dependencies"
	Add any library to the target layer. Consider adding this last as a catch-all strategy
	for any dependency that wasn't included yet.

	2. "snapshot-dependencies"
	Add any library that is detected as a SNAPSHOT.
				]]></xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:NMTOKEN">
							<xsd:enumeration value="dependencies"/>
							<xsd:enumeration value="snapshot-dependencies"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute type="xsd:string" name="layer"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="defaultClassesStrategyType">
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute name="id" use="required">
					<xsd:annotation>
						<xsd:documentation><![CDATA[
	The identifier of an out-of-the-box strategy for classes. The name of the layer
	matches the id of the strategy but can be overridden if necessary.

	There are 2 out-of-the-box classes strategies:

	1. "resources"
	Add static resources to the target layer.

	2. "application"
	Add any resources to the target layer. Consider adding this last as a catch-all
	strategy for any element of the classpath that wasn't included yet.
				]]></xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:NMTOKEN">
							<xsd:enumeration value="application"/>
							<xsd:enumeration value="resources"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute type="xsd:string" name="layer"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
</xsd:schema>